{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "c8zuAcfM5lDz"
   },
   "source": [
    "# 1. Big-O Theory exercises\n",
    "\n",
    "1. What is the big-O of the following algorithm? Assume `A` is an array of numbers\n",
    "\n",
    "```python\n",
    "def number_in_array(A, num):\n",
    "  for i in range(len(A)):\n",
    "    if A[i] == num:\n",
    "      return True\n",
    "  return False\n",
    "```\n",
    "\n",
    "2. What is the big-O of the following algorithm? Assume `A` and `B` are arrays of numbers of the **same length n**\n",
    "\n",
    "```python\n",
    "def number_in_two_arrays(A, B, num):\n",
    "  arr_len = len(A)\n",
    "  for i in range(arr_len):\n",
    "    if A[i] == num:\n",
    "      return True\n",
    "  for i in range(arr_len):\n",
    "    if B[i] == num:\n",
    "      return True\n",
    "  return False\n",
    "```\n",
    "\n",
    "3. What would be the big-O above if `A` was length `n` and `B` was length `m`?\n",
    "\n",
    "4. What is the big-O of the following algorithm? Assume `A` and `B` are arrays of numbers of the **same length n**\n",
    "\n",
    "```python\n",
    "def number_in_two_arrays(A, B, num):\n",
    "  arr_len = len(A)\n",
    "  for i in range(arr_len):\n",
    "    for j in range(arr_len):\n",
    "    if A[i] == B[j]:\n",
    "      return True\n",
    "  return False\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def number_in_array(A, num):  \n",
    "    for i in range(len(A)):\n",
    "        if A[i] == num:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "A = [5, 3, 2, 6]\n",
    "\n",
    "%timeit number_in_array(A, 5)\n",
    "\n",
    "# Big-O : O(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1.2\n",
    "\n",
    "def number_in_two_arrays(A, B, num):\n",
    "    arr_len = len(A)\n",
    "    for i in range(arr_len):\n",
    "        if A[i] == num:\n",
    "            return True\n",
    "  \n",
    "    for i in range(arr_len):\n",
    "        if B[i] == num:\n",
    "            return True\n",
    "    return False\n",
    "\n",
    "A = [5, 3, 2, 6]\n",
    "B = [1, 8, 3, 2]\n",
    "\n",
    "%timeit number_in_two_arrays(A, B, 5)\n",
    "\n",
    "# Big-O : O(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1.3\n",
    "\n",
    "# Big-O : O(n) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question 1.4\n",
    "\n",
    "def number_in_two_arrays(A, B, num):\n",
    "    arr_len = len(A)\n",
    "    for i in range(arr_len):\n",
    "        for j in range(arr_len):\n",
    "            if A[i] == B[j]:\n",
    "                return True\n",
    "        return False\n",
    "    \n",
    "A = [6, 2, 4, 6]\n",
    "B = [9, 3, 4, 2]\n",
    "\n",
    "%timeit number_in_two_arrays(A, B, 5)\n",
    "    \n",
    "# Big-O : O(n^2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "4lz1Ha-E_CQ1"
   },
   "source": [
    "# Reverse Sort\n",
    "\n",
    "Rewrite `selection_sort` so that it sorts in **reverse order** instead (biggest element first, smallest last)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def selection_sort(array):\n",
    "    a = len(array)\n",
    "    for i in range(a - 1):\n",
    "        index = i\n",
    "        \n",
    "        for j in range(i + 1, a):\n",
    "            if array[index] < array[j]:\n",
    "                index = j\n",
    "        \n",
    "        if index != i:\n",
    "            b = array[i]\n",
    "            array[i] = array[index]\n",
    "            array[index] = b\n",
    "    \n",
    "    return array\n",
    "\n",
    "array = [2, 22, 444, 322, 32, 29]\n",
    "            \n",
    "selection_sort(array)  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "kLzOQr8tAAIG"
   },
   "source": [
    "# Two sum (Brute Force)\n",
    "\n",
    "Two sum. Given an array and a number N, return True if there are numbers A, B in the array such that A + B = N. Otherwise, return False.\n",
    "\n",
    "```\n",
    "two_sum([1, 2, 3, 4], 5) ⇒ True\n",
    "two_sum([3, 4, 6], 6) ⇒ False\n",
    "```\n",
    "\n",
    "Write a brute force $O(n^2)$ algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_sum_brute(array, number):  \n",
    "    \n",
    "    for index_1 in range(len(array)):\n",
    "        for index_2 in range(len(array)):\n",
    "            if array[index_1] + array[index_2] == number:\n",
    "                return True\n",
    "             \n",
    "        return False \n",
    "            \n",
    "                \n",
    "\n",
    "two_sum_brute([1, 2, 3, 4], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_sum_brute([1, 4, 6], 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Two Sum (Fast Version)\n",
    "\n",
    "Write a linear time version $O(N)$ for the two sum problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def two_sum_fast(array,number):\n",
    "    \n",
    "    SET = {}\n",
    "    \n",
    "    for index in range(len(array)):\n",
    "        complement = number - array[index]\n",
    "        if complement in SET:\n",
    "            return True\n",
    "        SET[array[index]] = array[index]\n",
    "    return False\n",
    "\n",
    "two_sum_fast([1, 2, 3, 4], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_sum_fast([1, 4, 6], 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Two Sum (itertools version)\n",
    "\n",
    "Use `itertools.combinations` to write a $O(N)$ algorithm for two sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools\n",
    "def two_sum_itertool(array, number):\n",
    "    combinations = itertools.combinations(array, 2)\n",
    "    for combination in combinations:\n",
    "        if sum(combination) == number:\n",
    "            return True\n",
    "        \n",
    "    return False\n",
    "\n",
    "two_sum_itertool([1, 2, 3, 4], 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_sum_itertool([1, 4, 6], 6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linked Lists\n",
    "\n",
    "Unlike a regular array, a [Linked List](https://en.wikipedia.org/wiki/Linked_list) is a container where inserting a new element somewhere in the middle is $O(1)$. \n",
    "\n",
    "For a regular array inserting an element in the middle is $O(N)$, because we need to \"shift back\" all the elements after it. In practice, we might also have to allocate new memory to fit in the element.\n",
    "\n",
    "A linked list is a series of elements, `Node(value, next)` which work as follows:\n",
    "\n",
    "- The `value` field is the element value -- python object at that place in the list (like elements in a python `list`)\n",
    "\n",
    "- The `next` field points to the next element in the linked list. In python holding a reference to the element does this (the same way a python list holds references to objects)\n",
    "\n",
    "### Exercise\n",
    "\n",
    "Implement the `Node` Class as described above then initialize a list with 5 elements `(3 -> 'cat' -> 'dog' -> 55 -> 56)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node:\n",
    "    def __init__(self, value):\n",
    "        self.value = value\n",
    "        self.next_value = None\n",
    "        \n",
    "class Linked_list:\n",
    "    def __init__(self):\n",
    "        self.first_value = None\n",
    "    \n",
    "    def list_print(self):\n",
    "        print_value = self.first_value\n",
    "        while print_value is not None:\n",
    "            print(print_value.value)\n",
    "            print_value = print_value.next_value\n",
    "\n",
    "\n",
    "list_of_5_elements = Linked_list()\n",
    "list_of_5_elements.first_value = Node(3)\n",
    "element_2 = Node(\"cat\")\n",
    "element_3 = Node(\"dog\")\n",
    "element_4 = Node(55)\n",
    "element_5 = Node(56)\n",
    "\n",
    "list_of_5_elements.first_value.next_value = element_2\n",
    "element_2.next_value = element_3\n",
    "element_3.next_value = element_4\n",
    "element_4.next_value = element_5\n",
    "\n",
    "list_of_5_elements.list_print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reversing a linked list\n",
    "\n",
    "Write a $O(N)$ function `reverse_ll` that reverses all the pointers in a linked list:\n",
    "\n",
    "```\n",
    "(a -> b -> c) ⇒ (c -> b -> a)\n",
    "```\n",
    "\n",
    "Note: You don't have to reverse their order in the python tuple/list if that's where you're holding them. Just reverse their `Node` pointers to each other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Node:\n",
    "    def __init__(self, value):\n",
    "        self.value = value\n",
    "        self.next_value = None\n",
    "\n",
    "class Linked_list:\n",
    "    def __init__(self):\n",
    "        self.first_value = None\n",
    "        \n",
    "    def list_print(self):\n",
    "        print_value = self.first_value\n",
    "        while print_value is not None:\n",
    "            print(print_value.value)\n",
    "            print_value = print_value.next_value\n",
    "    \n",
    "    def reverse_ll(self): \n",
    "        previous_value = None\n",
    "        current_value = self.first_value \n",
    "        while(current_value is not None): \n",
    "            next_value = current_value.next_value\n",
    "            current_value.next_value = previous_value \n",
    "            previous_value = current_value \n",
    "            current_value = next_value\n",
    "        self.first_value = previous_value \n",
    "    \n",
    "\n",
    "list_of_5_elements = Linked_list()\n",
    "list_of_5_elements.first_value = Node(3)\n",
    "element_2 = Node(\"cat\")\n",
    "element_3 = Node(\"dog\")\n",
    "element_4 = Node(55)\n",
    "element_5 = Node(56)\n",
    "\n",
    "list_of_5_elements.first_value.next_value = element_2\n",
    "element_2.next_value = element_3\n",
    "element_3.next_value = element_4\n",
    "element_4.next_value = element_5\n",
    "\n",
    "list_of_5_elements.reverse_ll()\n",
    "list_of_5_elements.list_print()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyOATH9BoLFARMvG0o+Vj9NT",
   "collapsed_sections": [],
   "name": "Algorithms 1 Workshop.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
